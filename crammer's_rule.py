# -*- coding: utf-8 -*-
"""Crammer's rule.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WRFxED9MisnciYXbzyCbcss-K-GH6KDx
"""

import numpy as np
import sys

print("""Example
A1x + B1y + C1z = D1
A2x + B2y + C2z = D2
A3x + B3y + C3z = D3
""")

A1 = int(input('A1 = '))
A2 = int(input('A2 = '))
A3 = int(input('A3 = '))
print('\n')
B1 = int(input('B1 = '))
B2 = int(input('B2 = '))
B3 = int(input('B2 = '))
print('\n')
C1 = int(input('C1 = '))
C2 = int(input('C2 = '))
C3 = int(input('C3 = '))
print('\n')
D1 = int(input('D1 = '))
D2 = int(input('D2 = '))
D3 = int(input('D3 = '))

def matrix(a,b,c,d,e,f,g,h,i):
    matrix1 = np.array([[a,b,c],
                        [d,e,f],
                        [g,h,i]])
    return matrix1, np.linalg.det(matrix1)

matrix_a , det_a= matrix(A1,B1,C1,
                         A2,B2,C2,
                         A3,B3,C3)

matrix_dx, det_dx= matrix(D1,B1,C1,
                          D2,B2,C2,
                          D3,B3,C3)

matrix_dy, det_dy= matrix(A1,D1,C1,
                          A2,D2,C2,
                          A3,D3,C3)

matrix_dz, det_dz= matrix(A1,B1,D1,
                          A2,B2,D2,
                          A3,B3,D3)


def value_finder(a,b):
    return round(a/b)

if det_a == 0:
    print("Infinite Solutions")
    sys.exit(1)
"""## Now calculating the values"""
x = value_finder(det_dx,det_a)
y = value_finder(det_dy,det_a)
z = value_finder(det_dz,det_a)

# Printing the values
print('\n')
print(f'X: {x}\nY: {y}\nZ: {z}')

